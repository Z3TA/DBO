<!DOCTYPE html>
<html lang="en">
<head>
</head>

	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

	<title>DBO Manual</title>

	<meta name="description" content="Closures i JavaScript och hur man undviker dem.">

	<meta name="keywords" content="javascript, closure">

	<link rel="stylesheet" type="text/css"  href="design1/style.css">

	<link rel="stylesheet" type="text/css" href="design1/style.css">
	<link rel="stylesheet" type="text/css" href="prettify/prettify.css">
</head>

<body onload="prettyPrint()">

<div id="container">

<h1>DBO: Persistent data abstraction module</h1>



<h2>DBO.connect</h2>

<p>Connects to the mySQL database that will be used.</p>

<pre class="prettyprint">
var DBO = require("dbo");

DBO.connect({host: "127.0.0.1",	user: "myuser", password : "mypassword", database: "mydb"});
</pre>


<h2>DBO.List</h2>

<p>Creates a list of all the rows in a database table. Each item in the list will be an object.</p>

<pre class="prettyprint">
var players = new DBO.List({table: "player", fun: Player, key: "name"});

for(var name in players) {
	console.log(players[name].data.name);
	console.log(players[name].data.score);
}
</pre>

<p>The <b>key</b> should be the primary key of the database table (that can only be one field).<br>
If no key is specified, lower case "id" will be used.</p>

<p>The <b>fun</b>ction will be used to create the object.</p>
<p>If no function is specified, A new Object() will be used.</p>

<p>If DBO.cfg.asyncListsCreation is set to true, a callback can be set as a second argument.</p>



<h3>.add</h3>

<p>Adds a object to the list.</p>

<pre class="prettyprint">
players.add({name: "Jon Doe", age: 33});
</pre>

<p>Makes an INSERT into the database table specified when creating the list. And create a new Object with the constructor specified when making the list.</p>

<p>Returns the added object.</p>

<p>Tip: For convenience, use default values for most fields in the database!</p>




<h3>.link</h3>

<p>Makes data from one list accessible in another based on their relation.</p>

<pre class="prettyprint">
var players = new DBO.List({table: "player", fun: Player});
var shares = new DBO.List({table: "shares"});

players.link({list: shares, key: "player", attribute: "shareholders", pp: "issuer"});
players.link({list: shares, key: "owner", attribute: "investments"});

Player.prototype.showShareHolders = function() {
	var player = this;
	
	for(var share in player.shareholders) {
		showInfo( player.shareholders[share] );
	}
	
	function showInfo(share) {
		console.log(share.owner.data.name + " owns " + share.data.shares + 
		" share with a total worth of " + share.data.price);
	}
}
</pre>

<p>This will create a list of shareholders and investments under each player.</p>

<p>For convenience, the <b>pp</b> will be accessible from each share.<br>
If pp is not defined, the key will be used.<br>
This will however create a circular structure and can be disabled by defining pp to false, or for all links by setting DBA.cnf.pointToParentInLinks to false.</p>



<h3>.kill</h3>

<p>This will remove an object from the list.</p>

<pre class="prettyprint">
players.kill("Jon Doe");
</pre>

<p>The primary key need to be passed as argument.</p>

<p>Note that you should kill the child's before killing the parent:</p>

<pre class="prettyprint">
for(var id in players["Jon Doe"].armies) {
  armies.kill(id);	
}
players.kill("Jon Doe");
</pre>



<h2>DBO.Array</h2>

<p>Modified JS Array to hold the data.</p>

<p>Useful if you want a pure Array instead of a object literal.</p>

<p>Example use would be a game world map, where x, y are the dimensions.</p>

<pre class="prettyprint">
var spacemap = new DBO.Array();

spacemap.load({table: "spacemap", dimensions: ["x", "y"], fun: Spaceobject}, false);
spacemap.add({x: 0, y:2, type:"asteroid", type_id: 71});
console.log("spacemap.length=" + spacemap.length);
console.log(JSON.stringify(spacemap, null, 2));
</pre>

<p>If the Array will have holes in it (Posts might be deleted), consider using DBO.List instead.</p>





<h2>DBO.Log</h2>

<p>Works like DBO.List, but do not keep the data in memory. Only the amount of inserts are saved. Intended use for statistics of huge data that do not fit in memory.</p>

<pre class="prettyprint">
var attacks = new DBO.Log({table: attacks, keys: [attacker, defender]);

attacks.add({attacker: playerId, defender: anotherPlayer}); 

console.log( "Total attacks made by player " + playerId + ": " + attacks.count({attacker: playerId}) );

console.log( "Total attacks made by player " + playerId + " on player " + otherPlayer + ": " + attacks.count({attacker: playerId, defender: otherPlayer}) );
</pre>


<h3>.add</h3>

<p>Adds data to the log.</p>


<h3>.count</h3>

<p>Counts data entries. Works like a SELECT Count(*). But without the database round-trip!</p>

<p>The value can be retrieved directly without calling .count:</p>

<pre class="prettyprint">
console.log("Total attacks made by player " + playerId + ": " + attacks["attacker"][playerId].__total;

console.log( "Total attacks made by player " + playerId + " on player " + otherPlayer + ": " + attacks["attacker"][playerId]["defender"][otherPlayer]) );
</pre>


<h3>.list</h3>

<p>Select only a part of the log</p>

<pre class="prettyprint">
console.log(JSON.stringify(attacks.list({attacker: playerId}), null, 2));
</pre>


<h2>DBO.Table</h2>

<p>DBO.Table is used internally to hold the data in a key:value table.</p>

<pre class="prettyprint">
var player = new Player();
player.data = new DBO.Table({table: "player", keys: {name: "Johan"}}, doStuff);

function doStuff() {
	player.doSomething();
}
</pre>

<p>Selects all data from table <i>player</i> where <i>name</i> equals "Johan".</p>

<h3>Update the data</h3>

<pre class="prettyprint">
player.data.score = player.data.score + 1;
</pre>
 
<p>A Object defined setter works in the background and makes an async database UPDATE.</p>
 
 
 
 
 
<h2>Debugging</h2>
 
<pre class="prettyprint">
DBO.debug.showSQL = true;
DBO.debug.showWarnings = true;
DBO.debug.useColors = true;
</pre>



<h2>"Offline mode"</h2>

<p>When creating a DBO.List or DBO.Log, specify table: false.</p>

<p>No updates will be pushed to the database.<br>
Useful if you just want to test something or write a quick demo.</p>


<!--
<h2>Making database queries</h2>

<p>Although this module is meant to abstract the SQL, you can still make SQL queries:</p>
<pre class="prettyprint">

</pre>
-->



</div>

</body>

</html>
